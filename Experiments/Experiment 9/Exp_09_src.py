# -*- coding: utf-8 -*-
"""Exp_09.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gF6anJHbmdZZEy9KFzF1ZIFTLiDA32cO

## Sumit Patel - 40
### Experiment 9
"""

import numpy as np

"""### 1. Array Creation Techniques"""

array_from_list = np.array([1, 2, 3, 4, 5])
print("Array from List:", array_from_list)
print("\n")

array_arange = np.arange(0, 10, 2)
print("Array using arange:", array_arange)
print("\n")

array_linspace = np.linspace(0, 10, 5)
print("Array using linspace:", array_linspace)
print("\n")

array_zeros = np.zeros((3, 3))
print("Array of zeros:")
print(array_zeros)
print("\n")

array_ones = np.ones((2, 2))
print("Array of ones:")
print(array_ones)
print("\n")

array_eye = np.eye(3)
print("Identity matrix using eye():")
print(array_eye)
print("\n")

array_random = np.random.random((3, 3))
print("Array of random values:")
print(array_random)

"""### 2. Different NumPy Methods"""

reshaped_array = np.arange(1, 10).reshape(3, 3)
print("Reshaped array (1 to 9 into 3x3):")
print(reshaped_array)
print("\n")

transposed_array = reshaped_array.T
print("Transposed array:")
print(transposed_array)
print("\n")

array_math = np.array([1, 2, 3])
print("Array + 2:", array_math + 2)
print("Array * 3:", array_math * 3)
print("Square root of array:", np.sqrt(array_math))
print("\n")

print("Sum of array:", np.sum(array_math))
print("Mean of array:", np.mean(array_math))
print("Max of array:", np.max(array_math))
print("Min of array:", np.min(array_math))
print("\n")

array_a = np.array([1, 2, 3])
array_b = np.array([4, 5, 6])
concat_array = np.concatenate((array_a, array_b))
print("Concatenated arrays:", concat_array)
print("\n")

unsorted_array = np.array([3, 1, 4, 2])
sorted_array = np.sort(unsorted_array)
print("Sorted array:", sorted_array)
print("\n")

indexed_value = array_math[1]
print("Indexed value:", indexed_value)
sliced_array = array_math[1:3]
print("Sliced array:", sliced_array)
print("\n")

boolean_mask = array_math > 2
print("Boolean mask (values > 2):", boolean_mask)
print("Array with Boolean mask:", array_math[boolean_mask])
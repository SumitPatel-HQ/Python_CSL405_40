# -*- coding: utf-8 -*-
"""Exp_10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uKeNqFrgVGs5FBIAHS6DqKdIgGbehbW0

## Sumit Patel - 40
### Experiment 10
"""

from google.colab import files
uploaded = files.upload()

import numpy as np
import matplotlib.pyplot as plt
import cv2

image = cv2.imread('1 (2).png')

image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
plt.imshow(image_rgb)
plt.title("Original Image")
plt.axis("off")
plt.show()

"""### Grayscale Image"""

image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
plt.imshow(image_gray, cmap='gray')
plt.title("Grayscale Image")
plt.axis("off")
plt.show()

"""### Crop the image"""

cropped_image = image_rgb[50:150, 50:150]
plt.imshow(cropped_image)
plt.title("Cropped Image")
plt.axis("off")
plt.show()

"""### Brighten the image"""

bright_image = np.clip(image_rgb + 50, 0, 255)
plt.imshow(bright_image.astype(np.uint8))
plt.title("Brightened Image")
plt.axis("off")
plt.show()

"""### Edge detection"""

sobel_x = cv2.Sobel(image_gray, cv2.CV_64F, 1, 0, ksize=5)
sobel_y = cv2.Sobel(image_gray, cv2.CV_64F, 0, 1, ksize=5)
edge_image = np.sqrt(sobel_x**2 + sobel_y**2)
#Display
plt.imshow(edge_image, cmap='gray')
plt.title("Edge Detection")
plt.axis("off")
plt.show()

cv2.imwrite('modified_image.jpg', cv2.cvtColor(bright_image, cv2.COLOR_RGB2BGR))
print("Modified image saved as 'modified_image.jpg'")